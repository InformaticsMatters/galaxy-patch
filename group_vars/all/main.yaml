---

ansible_user: centos

provider: openstack

# Basename for nodes
# They will be called {{ exec_base_name ))-<N>
# where 'N' starts at {{ exec_offset }}
# until {{ exec_offset + exec_count - 1 }}
exec_base_name: pulsar-exec-node-b
exec_count: 20
exec_offset: 100
# The instance type/flavour
exec_type: le2.large
# Image name
# GPU:     vggp-v31-j138
# Non-GPU: vggp-v31-j124
exec_image_name: vggp-v31-j124
# Create them?
# If not the playbook simply gathers details
# of those that have been created.
# This is useful when patching existing machines.
#
# Typical create-and-patch pattern is as follows: -
#
# You try and create 20 instances but it fails after 15.
# So you delete any failed instances form the OpenStack console
# re-run the playbook after setting 'create_exec_instances' to 'no'.
# The playbook, in this "second run", simply 'queries' for instances
# and continues to patch using th instances it has found.
create_exec_instances: no
# Do the instances contain GPUs?
# And should we install CUDA?
exec_is_gpu: no
install_gpu_cuda: no

exec_network: pulsar-private
exec_userdata: '-'

os_auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
os_project_id: "{{ lookup('env', 'OS_PROJECT_ID') }}"
os_username: "{{ lookup('env', 'OS_USERNAME') }}"
os_password: "{{ lookup('env', 'OS_PASSWORD') }}"
os_user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
os_region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
os_availability_zone: "{{ lookup('env', 'OS_AVAILABILITY_ZONE')|default('ceph', true) }}"

# A convenient authentication dictionary.
# Used by numerous OpenStack tasks.
os_auth:
  auth_url: "{{ os_auth_url }}"
  username: "{{ os_username }}"
  password: "{{ os_password }}"
  project_id: "{{ os_project_id }}"
  user_domain_name: "{{ os_user_domain_name }}"
